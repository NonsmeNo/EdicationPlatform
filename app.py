from flask import Flask, render_template, request, redirect, url_for
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, login_user, logout_user, current_user, login_required
from werkzeug.security import generate_password_hash, check_password_hash
from email_validator import validate_email, EmailNotValidError

from config import Config
from models import db, Users, Themes, Tasks, Templates, SavedTasks

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)  
app.config.from_object(Config)  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SQLAlchemy –∏ LoginManager
db.init_app(app)
login_manager = LoginManager()
login_manager.init_app(app)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ user_loader –¥–ª—è Flask-Login
@login_manager.user_loader
def load_user(user_id):
    return Users.query.get(int(user_id))



# ----------------------------
# üó∫Ô∏è –†–æ—É—Ç—ã
# ----------------------------


@app.route('/')
def index():
    return render_template('index.html', current_path=request.path)


# --- üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è / —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ---

@app.route('/profile')
def profile():
    user = db.session.get(Users, current_user.get_id())
    if not user:
        return redirect(url_for('login'))
    return render_template('profile.html', current_path=request.path, user=user)

@app.route('/login', methods=["POST", "GET"])
def login():
    if request.method == "POST":
        errors = {}
        email = request.form['email'].lower()
        password = request.form['password']

        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
        if not email:
            errors['email'] = "–ü–æ–ª–µ e-mail –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ"
        if not password:
            errors['password'] = "–ü–æ–ª–µ –ø–∞—Ä–æ–ª—å –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ"

        if errors:
            return render_template("login.html", errors=errors, email=email)

        user = Users.query.filter_by(email=email).first()

        if user and check_password_hash(user.password, password):
            login_user(user)
            return redirect(url_for('profile'))
        
        # —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç
        msg = "–ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –∏–ª–∏ –ø–∞—Ä–æ–ª—å"
        msg_type = "error"
        return render_template("login.html", email=email, msg=msg, msg_type=msg_type)
    else:
        msg = request.args.get('msg', '')
        msg_type = request.args.get('msg_type', '')
        email = request.args.get('email', '')

        return render_template("login.html", msg=msg, msg_type=msg_type, email=email)



@app.route('/register', methods=["POST", "GET"])
def register():
    if request.method == "POST":
        errors = {}
        name = request.form['name']
        email = request.form['email'].lower()
        password = request.form['password']
        password_rep = request.form['password_rep']

        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
        if not name:
            errors['name'] = "–õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
        if not email:
            errors['email'] = "E-mail –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
        if not password:
            errors['password'] = "–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
        if not password_rep:
            errors['password_rep'] = "–ü–∞—Ä–æ–ª–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å"

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ email
        try:
            validate_email(email)
        except EmailNotValidError:
            errors['email'] = "–í–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π e-mail"

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ email
        existing_user = Users.query.filter_by(email=email).first()
        if existing_user:
            errors['email'] = "–î–∞–Ω–Ω—ã–π e-mail —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è."

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
        if password != password_rep:
            errors['password'] = "–ü–∞—Ä–æ–ª–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å"
            errors['password_rep'] = "–ü–∞—Ä–æ–ª–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å"

        if errors:
            return render_template("register.html", errors=errors, name=name, email=email)

        # –∑–∞–ø–∏—Å—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–¥
        hash = generate_password_hash(password)
        new_user = Users(name=name, email=email, password=hash)
        db.session.add(new_user)
        db.session.commit()

        # —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        msg = "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ—é —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å."
        msg_type = "success"
        return redirect(url_for('login', msg=msg, msg_type=msg_type, email=email))
    else:
        return render_template("register.html", errors={}, name="", email="")


@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('index'))



# --- üìä –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä ---

@app.route('/calculate')
def calculate():
    return render_template('calculate.html', current_path=request.path)


#  --- ‚öôÔ∏è –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–∞–¥–∞—á ---

@app.route('/taskThemes')
def task_themes():
    themes = Themes.query.all()
    return render_template('taskThemes.html', current_path=request.path, themes=themes)


    
@app.route('/params', methods=['POST', 'GET'])
def params():
    theme_id = request.args.get('theme_id')
    
    if request.method == "POST":
        task_id = request.form['task_id']
        return redirect(url_for('rend2', task_id=task_id))
    else:
        themes = Themes.query.all()
        current_theme = Themes.query.filter_by(id=theme_id).first()
        templates = Templates.query.filter_by(theme_id=current_theme.id).all()
        saved_tasks = SavedTasks.query.filter_by(user_id=current_user.get_id()).filter_by(
            theme_id=current_theme.id).all()
        return render_template("params.html", current_path=request.path,
                               saved_tasks=saved_tasks, themes=themes, 
                               current_theme=current_theme, templates=templates)



@app.route('/rend')
def rend():
    req = request.args.get('theme_id')
    theme_id = req.split('?')[0]
    template_id = req.split('?')[1].split('=')[1]
    print(theme_id)
    print(template_id)
    current_theme = Themes.query.filter_by(id=theme_id).first()

    current_template = Templates.query.filter_by(id=template_id).first()
    task = Tasks.query.filter_by(theme_id=theme_id).first()
    themes = Themes.query.all()
    return render_template("rend.html", current_theme=current_theme, task=task, current_template=current_template, themes=themes)

@app.route('/rendsave')
def rendsave():
    req = request.args.get('theme_id')
    theme_id = req.split('?')[0]
    task_id = req.split('?')[1].split('=')[1]
    print(theme_id)
    print(task_id)
    current_theme = Themes.query.filter_by(id=theme_id).first()

    current_task = SavedTasks.query.filter_by(id=task_id).first()
    task = Tasks.query.filter_by(theme_id=theme_id).first()
    themes = Themes.query.all()
    return render_template("rendSave.html", current_theme=current_theme, task=task, current_task=current_task, themes=themes)


@app.route('/add_task', methods=['POST'])
def add_task():
    data = request.json
    task = data.get('task')
    theme_id = data.get('theme_id')
    template_id = data.get('template_id')
    print(theme_id)

    new_saved_task = SavedTasks(task=task, theme_id=theme_id, user_id=current_user.get_id(), template_id=template_id)
    db.session.add(new_saved_task)
    db.session.commit()

    return jsonify({'message': 'Task added successfully'})

# ----------------------------
# üß± –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º
# ----------------------------

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã
def seed_themes():
    if Themes.query.count() == 0:
        themes = [
            Themes(id=1, name='–õ–∏–Ω–µ–π–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è'),
            Themes(id=2, name='–ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è'),
            Themes(id=3, name='–¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è')
        ]
        db.session.add_all(themes)
        db.session.commit()
        print("–¢–µ–º—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
    else:
        print("–¢–µ–º—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –±–¥")

def seed_templates():
    if Templates.query.count() == 0:
        templates = [
            Templates(template='$@*x$@=$@', template_show='a*x+b=c', theme_id=1),
            Templates(template='$@*x=$@', template_show='a*x=b', theme_id=1),
            Templates(template='$@*(x$@)=$@', template_show='a*(x-b)=c', theme_id=1),
            Templates(template='$@*x^2$@*x$@=0', template_show='a*x^2+bx+c=0', theme_id=2),
            Templates(template='$@*x^2$@*x=0', template_show='a*x^2+bx=0', theme_id=2),
            Templates(template='$@*sin(x)$@=$@', template_show='a*sin(x)+b=c', theme_id=3),
            Templates(template='$@*cos(x)$@=$@', template_show='a*cos(x)+b=c', theme_id=3),
        ]
        db.session.add_all(templates)
        db.session.commit()
        print("–®–∞–±–ª–æ–Ω—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
    else:
        print("–®–∞–±–ª–æ–Ω—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –±–¥")

def seed_tasks():
    if Tasks.query.count() == 0:
        tasks = [
            Tasks(task_text='–†–µ—à–∏—Ç–µ –ª–∏–Ω–µ–π–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ', theme_id=1),
            Tasks(task_text='–†–µ—à–∏—Ç–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ', theme_id=2),
            Tasks(task_text='–†–µ—à–∏—Ç–µ —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ', theme_id=3),
        ]
        db.session.add_all(tasks)
        db.session.commit()
        print("–ó–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
    else:
        print("–ó–∞–¥–∞—á–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –±–¥")

with app.app_context():
    db.create_all()
    seed_themes()
    seed_templates()
    seed_tasks()
    pass
    

if __name__ == "__main__":  # –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø—Ä–æ–µ–∫—Ç –∑–∞–ø—É—Å–∫–∞–ª—Å—è –∫–∞–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ flask
    app.run(debug=True)  # debug —á—Ç–æ–±—ã –≤—ã–≤–æ–¥–∏–ª–∏—Å—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—á–∫–µ –≤—Å–µ –æ—à–∏–±–∫–∏
