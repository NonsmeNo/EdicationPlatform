document.addEventListener('DOMContentLoaded', function() {


// üîß –û–°–ù–û–í–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –ò –ù–ê–°–¢–†–û–ô–ö–ò
const canv = el('canvas');
const btnShowGraph = el('btnShowGraph');
const btnShowAnsw = el('btnShowAnsw');
const answer = el('answer');
const template_value = el('template-value');
const template_latex = el('template-latex');
const template_id = el('template-id').value;
const colors = ['#01AB9F', '#FF7A5A', '#EE82EE', '#9A80F6', '#82AFFB'];

// üëª –ù–ê–°–¢–†–û–ô–ö–ê –ù–ê–ß–ê–õ–¨–ù–û–ì–û –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –≠–õ–ï–ú–ï–ù–¢–û–í
canv.style.display = 'none';
answer.style.display = 'none';

// üìê –ö–û–û–†–î–ò–ù–ê–¢–ù–ê–Ø –°–ò–°–¢–ï–ú–ê
x_left = -10;
x_right = 10;
y_down = x_left;
y_up = x_right;

// üñºÔ∏è –ü–û–î–ì–û–¢–û–í–ö–ê CANVAS
canv.style.display = 'block';
canv.width = canv.clientWidth;
canv.height = canv.clientHeight;
const width = canv.width;
const height = canv.height;
canv.style.display = 'none';

const ctx = canv.getContext('2d');
drow_start();
drow_axes();



// üß™ –ì–ï–ù–ï–†–ê–¶–ò–Ø –ó–ê–î–ê–ù–ò–Ø
const [example_task, latex] = create_task();

const MQ = MathQuill.getInterface(2); // v2 –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

// –∫—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ –∑–∞–¥–∞–Ω–∏—è
const outputDiv = document.getElementById("output");
const mathField = MQ.StaticMath(outputDiv);
mathField.latex(latex);


// -----------------------------------
// –°–û–ë–´–¢–ò–Ø–Ø
// üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –ó–ê–î–ê–ù–ò–Ø 

const SaveButton = el('btnSave');
if (btnSave) {
    SaveButton.addEventListener('click', () => {
        const task = example_task; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è task_example, –∫–æ—Ç–æ—Ä—É—é –¥–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        const theme_id = el('theme-id').value; // ID —Ç–µ–º—ã, –∫ –∫–æ—Ç–æ—Ä–æ–π –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
        const task_template = formatEqTemplate(example_task);
        fetch('/add_task', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({task, task_template, latex, theme_id, template_id}),
        })
        .then(response => response.json())
        .then(data => {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
            console.log('Task added successfully:', data);
            alert('–ó–∞–¥–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!')
        })
        .catch((error) => {
            console.error('Error:', error);
        });
    });
}


// üß† –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –û–¢–í–ï–¢–ê –ü–†–ò –ù–ê–ñ–ê–¢–ò–ò –ö–ù–û–ü–ö–ò

btnShowAnsw.addEventListener('click', () => {
    if (answer.style.display == 'none'){
        answer.style.display = 'block';
        if (template_id == 1 || template_id == 2 || template_id == 3) {
            findXLinear(example_task, template_id);
        } else if (template_id == 4 || template_id == 5) {
            ex = example_task.replace('^2', '*x');
            findXQuad(ex, template_id);
        } else if (template_id == 6 || template_id == 7) {
            findXTrig(example_task, template_id);
        }
        btnShowAnsw.textContent = '–°–∫—Ä—ã—Ç—å –æ—Ç–≤–µ—Ç';
    }
    else {
        answer.style.display = 'none';
        btnShowAnsw.textContent = '–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç';
    }
});


// üìä –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –ì–†–ê–§–ò–ö–ê –ü–†–ò –ù–ê–ñ–ê–¢–ò–ò –ö–ù–û–ü–ö–ò
btnShowGraph.addEventListener('click', () => {

    // –ü–æ–∫–∞–∑–∞—Ç—å canvas
    if (canv.style.display == 'none'){
        canv.style.display = 'block';

        btnShowGraph.textContent = '–°–∫—Ä—ã—Ç—å –≥—Ä–∞—Ñ–∏–∫';
        let str_graph = "";
        if (template_id == 1 || template_id == 2 || template_id == 3) {
            str_graph = convertEquation(example_task);
        } else if (template_id == 4 || template_id == 5) {
            str_graph = example_task.replace('^2', '*x');
            str_graph = str_graph.replace('=0', '');
        } else if (template_id == 6 || template_id == 7) {
            str_graph = convertEquation(example_task);
            console.log(str_graph);
        }

        drow_axes();
        let randomNumber = Math.floor(Math.random() * 5);
        draw_graph(str_graph, colors[randomNumber]);

    }
    else {
        canv.style.display = 'none';
        btnShowGraph.textContent = '–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫';
    }

});


//  ----------------------------
// üß© –§–£–ù–ö–¶–ò–ò

// üé≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
function create_task() {
    const task_template = template_value.value;
    const latex_template = template_latex.value;

    let values = [];
    let signs = []; 

    // –°—á–∏—Ç–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ —á–∏—Å–µ–ª –∏ –∑–Ω–∞–∫–æ–≤
    for (let ch of task_template) {
        if (ch === '@') values.push(Math.floor(Math.random() * 9) + 1);
        if (ch === '$') signs.push(Math.random() < 0.5 ? '+' : '-');
    }

    // –ó–∞–º–µ–Ω—è–µ–º –≤ —à–∞–±–ª–æ–Ω–µ –∑–∞–¥–∞—á–∏
    let task = '';
    let valueIndex = 0;
    let signIndex = 0;
    for (let ch of task_template) {
        if (ch === '@') {
            task += values[valueIndex++];
        } else if (ch === '$') {
            task += signs[signIndex++];
        } else {
            task += ch;
        }
    }

    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–π "+" –≤ –Ω–∞—á–∞–ª–µ task
    if (task[0] === '+') task = task.slice(1);
    task = task.replace('=+', '=').replace('=-', '=-');

    // –ó–∞–º–µ–Ω—è–µ–º –≤ —à–∞–±–ª–æ–Ω–µ LaTeX
    let latex = '';
    valueIndex = 0;
    signIndex = 0;
    for (let i = 0; i < latex_template.length; i++) {
        if (latex_template[i] === '@') {
            latex += values[valueIndex++];
        } else if (latex_template[i] === '$') {
            latex += signs[signIndex++];
        } else {
            latex += latex_template[i];
        }
    }

    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–π "+" –≤ –Ω–∞—á–∞–ª–µ latex
    if (latex[0] === '+') latex = latex.slice(1);
    latex = latex.replace('=+', '=').replace('=-', '=-');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç–∞, –µ—Å–ª–∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ (template_id = 4)
    if (template_id === 4) {
        const task_check = task.replace('^2', '*x');
        try {
            const parts = task_check.split("*x");
            const a = parseFloat(parts[0]);
            const b = parseFloat(parts[2]);
            const c = parseFloat(parts[3].split("=")[0]);
            const discriminant = b * b - 4 * a * c;
            if (discriminant < 0) return create_task(); // –Ω–µ—Ç –∫–æ—Ä–Ω–µ–π ‚Äî —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è
        } catch (err) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—è:", err);
            return create_task();
        }
    }

    

    return [task, latex];
}



// üßÆ –†–µ—à–µ–Ω–∏–µ –ª–∏–Ω–µ–π–Ω—ã—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π
function findXLinear(eq, type) {

    let a, b, c, x;


    if (type == 1) {
        let parts = eq.split('*x');
        console.log(parts)
        a = parseFloat(parts[0]);
        let bAndC = parts[1].split('=');
        b = parseFloat(bAndC[0]);
        c = parseFloat(bAndC[1]);
        x = (c - b) / a;
    } else if (type == 2) {
        let parts = eq.split('*x');
        a = parseFloat(parts[0]);
        let bb = parts[1].split('=');
        b = parseFloat(bb[1]);
        x = b / a;
    } else if (type == 3) {
        const aAndX = eq.split('(');
        const bAndC = eq.split(')');
        console.log(aAndX);
        console.log(bAndC);
        a = parseFloat(aAndX[0]);
        cc = bAndC[1].split('=');
        c = parseFloat(cc[1]);
        bb = bAndC[0].split('x');
        b = parseFloat(bb[1]);
        x = (c - a * b) / a;
    }

    // –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ 3 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    if (Number.isFinite(x) && x % 1 !== 0) {
    if (x.toString().split(".")[1]?.length > 3) {
        x = parseFloat(x.toFixed(3)); 
    }
}

    document.getElementById("answer").innerHTML = "–û—Ç–≤–µ—Ç: x = " + x;
}





// üìê –†–µ—à–µ–Ω–∏–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π

function findXQuad(eq, type) {
    let a, b, c;
    let result;

    // –ï—Å–ª–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –≤–∏–¥–∞ (ax^2 + bx + c = 0)
    if (type == 4) {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã a, b –∏ c –∏–∑ —É—Ä–∞–≤–Ω–µ–Ω–∏—è
        let parts = eq.split("*x");
        a = parseFloat(parts[0]); 
        b = parseFloat(parts[2]);
        c = parseFloat(parts[3].split("=")[0]);
        
        // –í—ã—á–∏—Å–ª—è–µ–º –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç
        let discriminant = b * b - 4 * a * c;

        // –ù–∞—Ö–æ–¥–∏–º –∫–æ—Ä–Ω–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç–∞
        if (discriminant > 0) {
            // –î–≤–∞ –∫–æ—Ä–Ω—è
            let x1 = (-b + Math.sqrt(discriminant)) / (2 * a);
            let x2 = (-b - Math.sqrt(discriminant)) / (2 * a);

            // –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ 3 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
            if (Number.isFinite(x1) && x1 % 1 !== 0) {
            if (x1.toString().split(".")[1]?.length > 3) {
                x1 = parseFloat(x1.toFixed(3)); 
            }
            if (Number.isFinite(x2) && x2 % 1 !== 0) {
            if (x2.toString().split(".")[1]?.length > 3) {
                x2 = parseFloat(x2.toFixed(3)); 
                }
            }

                // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            result = "–û—Ç–≤–µ—Ç: x‚ÇÅ = " + x1 + ", x‚ÇÇ = " + x2;
            result += ", D = " + discriminant; 
        } else if (discriminant === 0) {
            // –û–¥–∏–Ω –∫–æ—Ä–µ–Ω—å
            let x = -b / (2 * a);
            // –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ 3 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
            if (Number.isFinite(x) && x % 1 !== 0) {
            if (x.toString().split(".")[1]?.length > 3) {
                x = parseFloat(x.toFixed(3)); 
            }
            result = "–û—Ç–≤–µ—Ç: x = " + x + ", D = " + discriminant;
            }
        } else {
            // –ù–µ—Ç –∫–æ—Ä–Ω–µ–π
            result = "–û—Ç–≤–µ—Ç: –ù–µ—Ç –∫–æ—Ä–Ω–µ–π";
        }
    }
    

    // –ï—Å–ª–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–µ–ø–æ–ª–Ω–æ–≥–æ –≤–∏–¥–∞ (ax^2 + b = 0 –∏–ª–∏ ax^2 = 0)
    } else if (type == 5) {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã a –∏ b
        a = parseFloat(eq.split("*x")[0]);
        b = parseFloat(eq.split("*x*x")[1].split("x=")[0]);

        // –î–ª—è –Ω–µ–ø–æ–ª–Ω–æ–≥–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–µ—à–∞–µ–º: x1 = 0, x2 = -b/a
        let x2 = (b * (-1) / a)
        if (Number.isFinite(x2) && x % 1 !== 0) {
            if (x2.toString().split(".")[1]?.length > 3) {
                x2 = parseFloat(x2.toFixed(3)); 
            }
        result = "–û—Ç–≤–µ—Ç: x‚ÇÅ = 0, x‚ÇÇ = " + x2;
        }
    }

    document.getElementById("answer").innerHTML = result;
}




// üåä –†–µ—à–µ–Ω–∏–µ —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π
function findXTrig(eq) {
    const MQ = MathQuill.getInterface(2);
    const answerDiv = document.getElementById("answer");
    answerDiv.innerHTML = ""; // –û—á–∏—Å—Ç–∫–∞ –≤—ã–≤–æ–¥–∞

    const parts = eq.split("=");
    const lhs = parts[0];
    const rhs = parts[1];

    if (template_id == 6) {
        // sin(x)-—Ç–∏–ø
        const A = parseFloat(lhs.match(/(-?\d+)\*?sin\(x\)/)[1]);
        const B = parseFloat(lhs.match(/([+-]?\d+)(?!\*sin\(x\))/)[1]);
        const C = parseFloat(rhs);
        const sin_x = (C - B) / A;

        if (sin_x > 1 || sin_x < -1) {
            answerDiv.textContent = "–û—Ç–≤–µ—Ç: –Ω–µ—Ç –∫–æ—Ä–Ω–µ–π!";
            return;
        }

        const arcsinVal = Math.asin(sin_x);
        const x1 = arcsinVal.toFixed(2);
        const x2 = (Math.PI - arcsinVal).toFixed(2);

        const raw = sin_x;
        const formattedSin = (raw % 1 !== 0 && raw.toString().split('.')[1]?.length > 2)
            ? raw.toFixed(2)
            : raw.toString();

        const expressions = [
            `–û—Ç–≤–µ—Ç:`,
            `x = \\arcsin(${formattedSin}) + 2\\pi k`,
            `x = \\pi - \\arcsin(${formattedSin}) + 2\\pi k`,
            `x \\approx ${x1} + 2\\pi k`,
            `x \\approx ${x2} + 2\\pi k`
        ];

        expressions.forEach(expr => {
            const span = document.createElement("span");
            answerDiv.appendChild(span);
            MQ.StaticMath(span).latex(expr);
            answerDiv.appendChild(document.createElement("br"));
        });

    } else if (template_id == 7) {
        // cos(x)-—Ç–∏–ø
        const A = parseFloat(lhs.match(/(-?\d+)\*?cos\(x\)/)[1]);
        const B = parseFloat(lhs.match(/([+-]?\d+)(?!\*cos\(x\))/)[1]);
        const C = parseFloat(rhs);
        const cos_x = (C - B) / A;

        if (cos_x > 1 || cos_x < -1) {
            answerDiv.textContent = "–û—Ç–≤–µ—Ç: –Ω–µ—Ç –∫–æ—Ä–Ω–µ–π!";
            return;
        }

        const arccosVal = Math.acos(cos_x);
        const x1 = (Math.PI - arccosVal).toFixed(2);
        const x2 = (-Math.PI + arccosVal).toFixed(2);

        const raw = cos_x;
        const formattedCos = (raw % 1 !== 0 && raw.toString().split('.')[1]?.length > 2)
            ? raw.toFixed(2)
            : raw.toString();

        const expressions = [
            `–û—Ç–≤–µ—Ç:`,
            `x = \\pi - \\arccos(${formattedCos}) + 2\\pi k`,
            `x = -\\pi + \\arccos(${formattedCos}) + 2\\pi k`,
            `x \\approx ${x1} + 2\\pi k`,
            `x \\approx ${x2} + 2\\pi k`
        ];

        expressions.forEach(expr => {
            const span = document.createElement("span");
            answerDiv.appendChild(span);
            MQ.StaticMath(span).latex(expr);
            answerDiv.appendChild(document.createElement("br"));
        });
    }
}




// üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–ª—è —à–∞–±–ª–æ–Ω–∞
function formatEqTemplate(equation) {
    // –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã '*' –Ω–∞ '¬∑'
    let formatted = equation.replace(/\*/g, '¬∑');
    
    // –ó–∞–º–µ–Ω—è–µ–º 'x^2' –Ω–∞ 'x¬≤'
    formatted = formatted.replace(/x\^2/g, 'x¬≤');
    
    return formatted;
}




// üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
function convertEquation(eq) {
    // –ò–∑–º–µ–Ω—è–µ–º "=" –Ω–∞ "-" –∏–ª–∏ "=-" "+"
    eq =eq.replace('=', '-').replace('--', '+');

    return eq;
}

//  üõ†Ô∏è –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ ID
function el(id) {
return document.getElementById(id);
}


// üìà –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏
function draw_graph(str, color) {
let y_down = x_left;  // –ù–∏–∂–Ω–∏–π –ø—Ä–µ–¥–µ–ª –ø–æ –æ—Å–∏ Y
let y_up = x_right;   // –í–µ—Ä—Ö–Ω–∏–π –ø—Ä–µ–¥–µ–ª –ø–æ –æ—Å–∏ Y
let step = 0.01;      // –®–∞–≥ –ø–æ –æ—Å–∏ X

let x = x_left;       // –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ X
let y = eval(str);    // –í—ã—á–∏—Å–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ Y –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏
let x_canv = x2canv(x);  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º X –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–∞–Ω–≤–∞—Å–∞
let y_canv = y2canv(y);  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Y –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–∞–Ω–≤–∞—Å–∞

ctx.beginPath();      // –ù–∞—á–∏–Ω–∞–µ–º —Ä–∏—Å–æ–≤–∞–Ω–∏–µ
ctx.moveTo(x_canv, y_canv); 
ctx.lineWidth = 2;  
ctx.strokeStyle = color;
let f = 1;          

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≥—Ä–∞—Ñ–∏–∫–∞
for (let i = 0; i < x_right * 2; i += 0.01) {
    x = Number(x) + step;     // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º X –Ω–∞ —à–∞–≥
    y = eval(str);             // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º Y

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏ Y
    if (y <= y_up * 2 && y >= y_down * 2) {
        x_canv = x2canv(x);    
        y_canv = y2canv(y);   

        if (f == 0) {
            ctx.beginPath();
            ctx.moveTo(x_canv, y_canv); // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –æ—Ç—Ä–µ–∑–æ–∫ 
            f = 1;
        }
        ctx.lineTo(x_canv, y_canv);
    } else {
        if (f == 1) {
            ctx.stroke();  // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ—Ç—Ä–µ–∑–æ–∫
            f = 0;
        }
    }
}
if (f == 1) {
    ctx.stroke();
}
}


// ‚ûï –†–∏—Å–æ–≤–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω—ã—Ö –æ—Å–µ–π
function drow_axes(){
    ctx.globalAlpha = 1.0;
    //—Ä–∏—Å—É–µ–º –æ—Å—å –•
    y0_canv = y2canv(0)
    ctx.beginPath();
    ctx.moveTo(0, y0_canv);
    ctx.lineTo(width, y0_canv);
    ctx.lineWidth = 1;
    ctx.strokeStyle = 'black';
    ctx.stroke();

    //—Ä–∏—Å—É–µ–º –æ—Å—å Y
    x0_canv = x2canv(0);
    ctx.beginPath();
    ctx.moveTo( x0_canv, 0);
    ctx.lineTo( x0_canv, height);
    ctx.lineWidth = 1;
    ctx.strokeStyle = 'black';
    ctx.stroke();
}


// üîÅ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
function x2canv(x) {
    return (x-x_left)*width/(x_right - x_left);
}
function y2canv(y) {
    return height - (y-y_down)*height/(y_up - y_down);
}

function canv2x(x_canv) {
    x = Number(x_left) + x_canv*(x_right - x_left)/width;
    return x.toString().substr(0,5);
}
function canv2y(y_canv) {
    y = Number(y_down) + (Number(height) - y_canv)*(y_up - y_down)/height;
    return y.toString().substr(0,5);
}


// üß≠ –ü–æ–¥–ø–∏—Å–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –∫—É—Ä—Å–æ—Ä–∞
function drow_start() {
    ctx.font = "16px Arial";

    canv.addEventListener("mousemove", ev => {
        var cRect = canv.getBoundingClientRect();  // –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –∫–∞–Ω–≤—ã
        var x_canv = Math.round(ev.clientX - cRect.left);  //–∏–∑ –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–∞–Ω–≤—ã
        var y_canv = Math.round(ev.clientY - cRect.top);
        var X = canv2x(x_canv);
        var Y = canv2y(y_canv);

        ctx.clearRect(width-100,10, 70, 70);
        ctx.fillText("X: "+X, width-100, 30);
        ctx.fillText("Y: "+Y, width-100, 50);
    });
}


// üßÆ –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
function abs(x){return Math.abs(x);}
function acos(x){return Math.acos(x);}
function acosh(x){return Math.acosh(x);}
function asin(x){return Math.asin(x);}
function asinh(x){return Math.asinh(x);}
function atan(x){return Math.atan(x);}
function cos(x){return Math.cos(x);}
function exp(x){return Math.exp(x);}
function log(x){return Math.log(x);}
function sign(x){return Math.sign(x);}
function sin(x){return Math.sin(x);}
function sqrt(x){return Math.sqrt(x);}
function tan(x){return Math.tan(x);}
function pow(a,b){return Math.pow(a,b);}
function cosh(x){return Math.cosh(x);}

});